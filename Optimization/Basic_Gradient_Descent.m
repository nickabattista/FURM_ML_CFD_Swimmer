%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION: performs gradient descent to find the minimum of the 
%           function 
%   
%                   f(x,y) = 2*(x-1)^2 + 3*(y+2)^2        
%   
%           This function's minimum is at (x,y)=(1,-2)
%
%   Author: Nick A. Battista
%   Date: November 2021
%   Institution: The College of New Jersey
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Basic_Gradient_Descent()

%------------------------------------------------------------
%                     x0: Initial Guess
%------------------------------------------------------------
x0 = [5 3];

%------------------------------------------------------------
%                 # of iterations to make
%------------------------------------------------------------
NTimes = 25;

%------------------------------------------------------------
%               Learning rate (step-size)
%------------------------------------------------------------
alpha = 0.2;

%------------------------------------------------------------
%  Define current estimate (err 'previous') as initial guess
%------------------------------------------------------------
xPrev = x0;

%------------------------------------------------------------
%          Initialize Storage Vectors and Arrays
%------------------------------------------------------------
xMAT = zeros(NTimes,2); 

%------------------------------------------------------------
%           For storing each iteration's guess
%------------------------------------------------------------
ct = 1;
xMAT(ct,:) = x0; 

%-----------------------------------------------------------------
%-----------------------------------------------------------------
%              Perform Gradient Descent --> iterate!
%-----------------------------------------------------------------
%-----------------------------------------------------------------
for n=1:NTimes

    %------------------------------------------------
    %        Get next guess (actual GD step)
    %------------------------------------------------
    xNext = xPrev - alpha*GRAD( xPrev );

    %------------------------------------------------
    %           Store next guess into matrix
    %------------------------------------------------
    ct=ct+1;
    xMAT(ct,:) = xNext;

    %------------------------------------------------
    % Change 'who is who'
    %  (redefine prev. as current for next iteration)
    %------------------------------------------------
    xPrev = xNext;

end

%------------------------------------------------
% Print out each iteration's information
%------------------------------------------------
fprintf('n |  (xn,yn) \n')
for n=1:length(xMAT(:,1))
    fprintf('%d | (%.8f,%.8f)\n', n-1, xMAT(n,1), xMAT(n,2) );
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION: provide gradient of function being minimized
%       
%       input: row vector
%       return: row vector
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function gradVec = GRAD( xVec )

%------------------------------------------------
% get entries of input vector
%------------------------------------------------
x = xVec(1);
y = xVec(2);

%---------------------------------------------------------------
% Store gradient of function (as row vector in this code)
%    --> Here, setup for f(x,y) = 2*(x-1)^2 + 3*(y+2)^2
%---------------------------------------------------------------
gradVec = [ 4*( x-1 ) 6*( y+2 ) ];